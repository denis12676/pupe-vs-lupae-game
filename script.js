// –ò–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
class PupeLupaeGame {
    constructor() {
        this.currentScreen = 'welcome';
        this.gameActive = false;
        this.gameDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã
        this.techSpeed = {
            minInterval: 1200,    // –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
            maxInterval: 2200,   // –º–∞–∫—Å–∏–º—É–º 2.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
            startDelay: 1500     // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π
        };
        
        // –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–±–æ –∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–≤
        this.combo = {
            streak: 0,
            multiplier: 1,
            perfectStreak: 0,
            maxMultiplier: 5,
            comboTimer: null,
            comboResetTime: 2000
        };
        
        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (—ç–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ –≤–∏–±—Ä–∞—Ü–∏—é)
        this.soundEnabled = true;
        this.musicEnabled = false;
        
        // –†–µ–∂–∏–º –≤—ã–∑–æ–≤–∞
        this.challengeMode = false;
        this.spoiledMoves = false;
        this.timer = null;
        this.techTimer = null;
        this.money = 0;
        this.correctMoves = 0;
        this.wrongMoves = 0;
        this.premiumCount = 0;
        this.lastTapTime = 0;
        this.comboWindow = 300; // –æ–∫–Ω–æ –¥–ª—è –∫–æ–º–±–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        // –°–ø–∏—Å–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        this.frontendTechs = [
            'React', 'Vue.js', 'Angular', 
            'CSS', 'HTML', 'JavaScript', 
            'TypeScript', 'SASS', 'JSX',
            'Bootstrap', 'Tailwind', 'Webpack'
        ];
        
        this.backendTechs = [
            'Node.js', 'Django', 'Express.js', 
            'Python', 'PostgreSQL', 'MongoDB', 
            'Ruby on Rails', 'ASP.NET', 'MySQL',
            'Redis', 'GraphQL', 'Docker'
        ];
        
        // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        this.pupeReactions = [
            "–£—Ä–∞! –ï—â—ë –æ–¥–∏–Ω CSS-–º–∞—Å—Ç–µ—Ä! üíÖ",
            "React forever! ‚öõÔ∏è",
            "–ù–∞—á–∏–Ω–∞–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ TypeScript! üìù",
            "–ì–ª–∞–≤–Ω–æ–µ —Ç–µ–Ω–∏ –∫—Ä–∞—Å–∏–≤—ã–µ! ‚ú®",
            "Flexbox ‚Äî –º–æ—è —Å–∏–ª–∞! üí™"
        ];
        
        this.lupaeReactions = [
            "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–æ—è —Å—Ç–∏—Ö–∏—è! üóÑÔ∏è",
            "–°–µ—Ä–≤–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏! ‚ö°",
            "Python ‚Äî —ç—Ç–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å! üêç",
            "API –∫–∞–∫ —á–∞—Å—ã! ‚è∞",
            "–ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º –º–∞–≥–∏—è! ü™Ñ"
        ];
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.setupThemeToggle();
        this.showWelcomeScreen();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        setTimeout(() => {
            document.querySelector('.game-title').classList.add('animate-bounce-in');
            document.querySelector('.character-preview').style.opacity = '0';
            setTimeout(() => {
                document.querySelector('.character-preview').style.opacity = '1';
            }, 200);
        }, 100);
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.getElementById('start-game-btn').addEventListener('click', () => {
            this.startGame();
        });
        
        // –ò–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('pupe-btn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleTap('pupe');
        });
        
        document.getElementById('pupe-btn').addEventListener('click', (e) => {
            e.preventDefault();
            this.handleTap('pupe');
        });
        
        document.getElementById('lupae-btn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleTap('lupae');
        });
        
        document.getElementById('lupae-btn').addEventListener('click', (e) => {
            e.preventDefault();
            this.handleTap('lupae');
        });
        
        // –ö–Ω–æ–ø–∫–∞ —Å–Ω–æ–≤–∞ –∏–≥—Ä–∞—Ç—å
        document.getElementById('play-again-btn').addEventListener('click', () => {
            this.showWelcomeScreen();
        });
        
        // –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.getElementById('secret-mode').addEventListener('click', () => {
            this.toggleChallengeMode();
        });
        
        document.getElementById('sound-toggle').addEventListener('click', () => {
            this.toggleSound();
        });
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupMobileOptimization();
    }
    
    setupMobileOptimization() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑—É–º–∞ –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (e) => {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                e.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        this.vibrateSupported = 'vibrate' in navigator;
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏–π
        document.addEventListener('touchstart', (e) => {
            if (this.gameActive) {
                e.target.classList.add('touching');
            }
        }, true);
        
        document.addEventListener('touchend', (e) => {
            e.target.classList.remove('touching');
        }, true);
    }
    
    setupThemeToggle() {
        const themeToggle = document.getElementById('theme-toggle');
        const body = document.body;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        const savedTheme = localStorage.getItem('theme') || 'light';
        body.setAttribute('data-theme', savedTheme);
        themeToggle.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        
        themeToggle.addEventListener('click', () => {
            const currentTheme = body.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            body.setAttribute('data-theme', newTheme);
            themeToggle.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
            localStorage.setItem('theme', newTheme);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
            document.body.style.background = newTheme === 'dark' ? 'linear-gradient(180deg, #000 0%, #1a1a2e 100%)' : 'linear-gradient(180deg, #667eea 0%, #764ba2 100%)';
            
            setTimeout(() => {
                document.body.style.background = '';
            }, 500);
        });
    }
    
    showWelcomeScreen() {
        this.hideAllScreens();
        this.currentScreen = 'welcome';
        
        // –°–±—Ä–æ—Å –∏–≥—Ä—ã
        this.gameActive = false;
        this.money = 0;
        this.correctMoves = 0;
        this.wrongMoves = 0;
        this.premiumCount = 0;
        
        document.getElementById('welcome-screen').classList.remove('hidden');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        this.addRandomCharacterAnimations();
    }
    
    showGameScreen() {
        this.hideAllScreens();
        this.currentScreen = 'game';
        document.getElementById('game-screen').classList.remove('hidden');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        this.startTechCycle();
        this.startGameTimer();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        setTimeout(() => {
            document.querySelector('.game-buttons').style.transform = 'translateY(100px)';
            document.querySelector('.game-buttons').style.opacity = '0';
            setTimeout(() => {
                document.querySelector('.game-buttons').style.transition = 'all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1)';
                document.querySelector('.game-buttons').style.transform = 'translateY(0)';
                document.querySelector('.game-buttons').style.opacity = '1';
            }, 200);
        }, 100);
    }
    
    showResultScreen() {
        this.hideAllScreens();
        this.currentScreen = 'result';
        
        document.getElementById('result-screen').classList.remove('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        document.getElementById('final-money').textContent = this.money;
        document.getElementById('correct-moves').textContent = this.correctMoves;
        document.getElementById('wrong-moves').textContent = this.wrongMoves;
        document.getElementById('premium-count').textContent = this.premiumCount;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–±–æ
        let status = '';
        const maxMultiplier = Math.max(1, this.combo.perfectStreak);
        
        if (this.money >= 25) status = 'üåü LEGENDARY! –ö–æ–º–±–æ-–º–∞—Å—Ç–µ—Ä!';
        else if (this.money >= 20) status = 'üî• –¢–ê–ö–°–ê–°! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∫–æ–º–±–æ!';
        else if (this.money >= 15) status = 'üíØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è!';
        else if (this.money >= 10) status = '‚ö° –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!';
        else if (this.money >= 5) status = 'üëç –ù–µ–ø–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!';
        else if (this.money >= 2) status = 'ü§î –ï—â–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è';
        else status = 'üòÖ –ë—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–±–æ –∫ —Å—Ç–∞—Ç—É—Å—É
        if (maxMultiplier >= 5) status += ' + –ú–ê–ö–°–ò –ö–û–ú–ë–û!';
        else if (maxMultiplier >= 3) status += ' | –û—Ç–ª–∏—á–Ω—ã–µ –∫–æ–º–±–æ!';
        
        document.getElementById('score-status').textContent = status;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        const bestScore = parseInt(localStorage.getItem('bestScore')) || 0;
        if (this.money > bestScore) {
            localStorage.setItem('bestScore', this.money.toString());
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            setTimeout(() => {
                this.showAchievement('üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', `–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${this.money} –¥–µ–Ω–µ–≥!`);
            }, 1000);
        }
    }
    
    hideAllScreens() {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.add('hidden');
        });
    }
    
    startGame() {
        this.gameActive = true;
        this.showGameScreen();
        
        // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.body.style.backgroundColor = '#1a1a2e';
        setTimeout(() => {
            document.body.style.backgroundColor = '';
        }, 500);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        setTimeout(() => {
            document.getElementById('instruction-text').textContent = '–ì–æ—Ç–æ–≤—ã? –ü—É–ø–∞ –ø—Ä–æ—Ç–∏–≤ –õ—É–ø—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! ‚ö°';
        }, 500);
        
        setTimeout(() => {
            document.getElementById('instruction-text').textContent = '–¢–∞–ø–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏!';
        }, 2000);
    }
    
    startTechCycle() {
        let techInterval = () => {
            if (!this.gameActive) return;
            
            const techType = Math.random();
            let tech, techCategory;
            
            if (techType < 0.6) {
                // –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è (60% —à–∞–Ω—Å)
                tech = this.getRandomTech('frontend');
                techCategory = 'frontend';
            } else if (techType < 0.95) {
                // –ë—ç–∫–µ–Ω–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è (35% —à–∞–Ω—Å)
                tech = this.getRandomTech('backend');
                techCategory = 'backend';
            } else {
                // –ü—Ä–µ–º–∏—è (5% —à–∞–Ω—Å)
                tech = '–ü—Ä–µ–º–∏—è';
                techCategory = 'premium';
            }
            
            this.displayTech(tech, techCategory);
            
            // –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
            const nextInterval = this.techSpeed.minInterval + Math.random() * (this.techSpeed.maxInterval - this.techSpeed.minInterval);
            setTimeout(techInterval, nextInterval);
        };
        
        // –ü–µ—Ä–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(techInterval, this.techSpeed.startDelay);
    }
    
    getRandomTech(type) {
        const techs = type === 'frontend' ? this.frontendTechs : this.backendTechs;
        return techs[Math.floor(Math.random() * techs.length)];
    }
    
    displayTech(tech, category) {
        const badge = document.getElementById('technology-badge');
        const techElement = document.getElementById('current-tech');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        techElement.textContent = tech;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–Ω–∞—á–∫–∞
        badge.className = `technology-badge ${category}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        techElement.style.animation = 'none';
        setTimeout(() => {
            techElement.style.animation = 'bounceIn 0.4s ease-out';
        }, 10);
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∑–Ω–∞—á–∫–∞
        if (category === 'premium') {
            badge.classList.add('premium');
            document.body.style.backgroundColor = '#2d1b69';
            setTimeout(() => {
                document.body.style.backgroundColor = '';
            }, 300);
        } else {
            badge.classList.remove('premium');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if (category === 'premium') {
            document.getElementById('instruction-text').textContent = '‚ö° –ü–†–ï–ú–ò–Ø! –ù–∞–∂–∏–º–∞–π—Ç–µ –û–ë–ê –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!';
            document.getElementById('instruction-text').style.color = 'var(--warning-color)';
            document.getElementById('instruction-text').style.animation = 'pulse 1s ease-in-out infinite';
        } else {
            const target = category === 'frontend' ? '–ü—É–ø—É' : '–õ—É–ø—É';
            document.getElementById('instruction-text').textContent = `–¢–∞–ø–Ω–∏—Ç–µ "–ó–∞ ${target}"!`;
            document.getElementById('instruction-text').style.color = 'var(--text-color)';
            document.getElementById('instruction-text').style.animation = 'none';
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.currentTech = tech;
        this.currentTechCategory = category;
    }
    
    startGameTimer() {
        let timeLeft = this.gameDuration;
        const timerElement = document.getElementById('timer');
        
        const updateTimer = () => {
            if (!this.gameActive) return;
            
            const seconds = Math.ceil(timeLeft / 1000);
            timerElement.textContent = seconds;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –º–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if (timeLeft <= 3000) {
                timerElement.parentElement.classList.add('warning');
                if (timeLeft <= 1000) {
                    document.body.style.backgroundColor = '#ef4444';
                    setTimeout(() => {
                        document.body.style.backgroundColor = '';
                    }, 200);
                }
            }
            
            if (timeLeft <= 0) {
                this.endGame();
                return;
            }
            
            timeLeft -= 100;
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ 100–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const timerInterval = setInterval(() => {
            updateTimer();
            if (!this.gameActive) {
                clearInterval(timerInterval);
            }
        }, 100);
    }
    
    handleTap(pressedBy) {
        if (!this.gameActive || !this.currentTech) return;
        
        const now = Date.now();
        const tapTime = now - this.lastTapTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è
        if (this.currentTechCategory === 'premium') {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
            if (tapTime <= this.comboWindow) {
                this.correctMove(30, 'premium'); // –ë–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å
            } else {
                this.wrongMove();
            }
        } else {
            // –û–±—ã—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            const expected = this.currentTechCategory === 'frontend' ? 'pupe' : 'lupae';
            if (pressedBy === expected) {
                this.correctMove(10);
            } else {
                this.wrongMove();
            }
        }
        
        this.lastTapTime = now;
        
        // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        if (this.vibrateSupported) {
            navigator.vibrate(50);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫–Ω–æ–ø–∫–∏
        this.addButtonEffect(pressedBy);
    }
    
    correctMove(points, moveType = 'normal') {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ
        this.updateCombo();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∫ –æ—á–∫–∞–º
        const finalPoints = Math.floor(points * this.combo.multiplier);
        this.money += finalPoints;
        this.correctMoves++;
        
        if (moveType === 'premium') {
            this.premiumCount++;
        }
        
        this.updateMoneyDisplay();
        this.updateComboDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–æ–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–æ–º
        const comboText = this.combo.multiplier > 1 ? `+${finalPoints} (x${this.combo.multiplier})` : `+${finalPoints}`;
        this.showFloatingText(comboText, 'success');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (moveType === 'premium') {
            this.showCharacterReaction('premium');
        } else {
            const character = this.currentTechCategory === 'frontend' ? 'pupe' : 'lupae';
            this.showCharacterReaction(character);
        }
    }
    
    wrongMove() {
        this.wrongMoves++;
        this.resetCombo(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.money = Math.max(0, this.money - 2); // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        
        this.updateMoneyDisplay();
        this.updateComboDisplay();
        this.showFloatingText('-2', 'danger');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ
        this.showCharacterReaction('disappointment');
    }
    
    updateCombo() {
        this.combo.streak++;
        this.combo.perfectStreak = this.combo.streak;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ö–æ–¥–∞
        if (this.combo.streak % 3 === 0 && this.combo.multiplier < this.combo.maxMultiplier) {
            this.combo.multiplier = Math.min(this.combo.maxMultiplier, Math.floor(this.combo.streak / 3) + 1);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–º–±–æ
        if (this.combo.comboTimer) {
            clearTimeout(this.combo.comboTimer);
        }
        this.combo.comboTimer = setTimeout(() => {
            this.resetCombo();
        }, this.combo.comboResetTime);
    }
    
    resetCombo() {
        this.combo.streak = 0;
        this.combo.multiplier = 1;
        this.combo.perfectStreak = 0;
        if (this.combo.comboTimer) {
            clearTimeout(this.combo.comboTimer);
            this.combo.comboTimer = null;
        }
        this.updateComboDisplay();
    }
    
    updateComboDisplay() {
        const comboElement = document.getElementById('combo-text');
        const comboBar = document.getElementById('combo-bar');
        
        if (this.combo.multiplier > 1) {
            comboElement.textContent = `üî• x${this.combo.multiplier}`;
            comboElement.style.color = '#ff6b6b';
            comboElement.style.textShadow = '0 0 15px rgba(255, 107, 107, 0.8)';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä 
            const progress = (this.combo.streak % 3) / 3 * 100;
            const barBefore = comboBar.cloneNode(true);
            barBefore.style.width = `${progress}%`;
            barBefore.style.display = 'block';
            barBefore.style.height = '100%';
            barBefore.style.background = 'linear-gradient(90deg, #ff6b6b, #feca57, #48dbfb)';
            barBefore.style.borderRadius = '2px';
            barBefore.style.transition = 'width 0.3s ease';
        } else {
            comboElement.textContent = 'üî• x1';
            comboElement.style.color = 'var(--warning-color)';
            comboElement.style.textShadow = '0 0 10px rgba(245, 158, 11, 0.5)';
        }
    }
    
    toggleChallengeMode() {
        this.challengeMode = !this.challengeMode;
        
        if (this.challengeMode) {
            // –†–µ–∂–∏–º –≤—ã–∑–æ–≤–∞: –±—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
            this.techSpeed.minInterval = 800;
            this.techSpeed.maxInterval = 1400;
            this.showFloatingMessage('üíé –†–ï–ñ–ò–ú –í–´–ó–û–í–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!', 'gold');
            document.getElementById('secret-mode').style.boxShadow = '0 0 25px rgba(255, 215, 0, 0.8)';
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            this.techSpeed.minInterval = 1200;
            this.techSpeed.maxInterval = 2200;
            this.showFloatingMessage('üíé –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º', 'info');
            document.getElementById('secret-mode').style.boxShadow = '';
        }
    }
    
    toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        
        if (this.soundEnabled) {
            document.getElementById('sound-toggle').textContent = 'üîä';
            document.getElementById('sound-toggle').style.boxShadow = '0 0 20px rgba(76, 175, 80, 0.5)';
            this.showFloatingMessage('üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω', 'success');
        } else {
            document.getElementById('sound-toggle').textContent = 'üîá';
            document.getElementById('sound-toggle').style.boxShadow = '';
            this.showFloatingMessage('üîá –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω', 'info');
        }
    }
    
    showFloatingMessage(text, type = 'info') {
        const colors = {
            'success': '#4CAF50',
            'info': '#2196F3', 
            'warning': '#FF9800',
            'gold': '#FFD700'
        };
        
        const floatingMsg = document.createElement('div');
        floatingMsg.textContent = text;
        floatingMsg.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: ${colors[type]};
            font-size: 1.5rem;
            font-weight: 900;
            pointer-events: none;
            z-index: 1000;
            text-shadow: 0 0 15px rgba(0,0,0,0.8);
            animation: floatUp 2s ease-out forwards;
        `;
        
        document.body.appendChild(floatingMsg);
        
        setTimeout(() => {
            floatingMsg.remove();
        }, 2000);
    }
    
    updateMoneyDisplay() {
        document.getElementById('money').textContent = this.money;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–Ω–µ–≥
        const moneyElement = document.getElementById('money');
        moneyElement.style.transform = 'scale(1.2)';
        setTimeout(() => {
            moneyElement.style.transform = 'scale(1)';
        }, 200);
    }
    
    addButtonEffect(buttonType) {
        const button = document.getElementById(`${buttonType}-btn`);
        button.style.transform = 'scale(0.95)';
        button.style.boxShadow = 'inset 0 0 20px rgba(255,255,255,0.3)';
        
        setTimeout(() => {
            button.style.transform = '';
            button.style.boxShadow = '';
        }, 150);
    }
    
    showFloatingText(text, type) {
        const color = type === 'success' ? 'var(--success-color)' : 'var(--danger-color)';
        const floatingText = document.createElement('div');
        floatingText.textContent = text;
        floatingText.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: ${color};
            font-size: 2rem;
            font-weight: 900;
            pointer-events: none;
            z-index: 1000;
            animation: floatUp 1s ease-out forwards;
        `;
        
        document.body.appendChild(floatingText);
        
        setTimeout(() => {
            floatingText.remove();
        }, 1000);
    }
    
    showCharacterReaction(character) {
        let reactions = [];
        
        switch(character) {
            case 'pupe':
                reactions = this.pupeReactions;
                break;
            case 'lupae':
                reactions = this.lupaeReactions;
                break;
            case 'disappointment':
                reactions = ['–û–π... üòÖ', '–ù–µ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç! ü§¶‚Äç‚ôÇÔ∏è', '–ë—ã–≤–∞–µ—Ç... ü§∑‚Äç‚ôÄÔ∏è', '–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ! üöÄ'];
                break;
            case 'premium':
                reactions = ['üí∞ –ë–û–ñ–ê–¢–°–ö–ê–Ø –ü–†–ï–ú–ò–Ø!', '‚≠ê –≠–ö–°–¢–†–ê –í–ê–ô–ë–´!', 'üíé –†–ê–ó–ë–û–ì–ê–°–¢–ï–ô!', 'üöÄ –ö –û–°–ò–õ–ò! üî•'];
                break;
        }
        
        const reaction = reactions[Math.floor(Math.random() * reactions.length)];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        const instructionElement = document.getElementById('instruction-text');
        const originalText = instructionElement.textContent;
        const originalStyle = instructionElement.style.color;
        
        instructionElement.textContent = reaction;
        instructionElement.style.color = character === 'premium' ? 'var(--warning-color)' : 
                                      character === 'disappointment' ? 'var(--danger-color)' : 'var(--text-color)';
        
        setTimeout(() => {
            instructionElement.textContent = originalText;
            instructionElement.style.color = originalStyle;
        }, 2000);
    }
    
    addRandomCharacterAnimations() {
        const characters = document.querySelectorAll('.character');
        
        characters.forEach((char, index) => {
            setTimeout(() => {
                char.style.animation = 'bounceIn 0.6s ease-out';
            }, index * 200);
        });
    }
    
    showAchievement(title, description) {
        const achievement = document.createElement('div');
        achievement.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #000;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-weight: 700;
            z-index: 1001;
            animation: slideInDown 0.5s ease-out, slideOutUp 0.5s ease-in 3s forwards;
            box-shadow: 0 20px 25px -5px rgba(255, 215, 0, 0.4);
        `;
        
        achievement.innerHTML = `
            <div style="font-size: 1.2rem;">${title}</div>
            <div style="font-size: 0.9rem; opacity: 0.8;">${description}</div>
        `;
        
        document.body.appendChild(achievement);
        
        setTimeout(() => {
            achievement.remove();
        }, 4000);
    }
    
    endGame() {
        this.gameActive = false;
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.timer) clearInterval(this.timer);
        if (this.techTimer) clearInterval(this.techTimer);
        clearInterval(this.timerInterval);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        setTimeout(() => {
            this.showResultScreen();
        }, 1000);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        document.body.style.backgroundColor = '#1a1a2e';
        setTimeout(() => {
            document.body.style.backgroundColor = '';
        }, 2000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const game = new PupeLupaeGame();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const style = document.createElement('style');
    style.textContent = `
        @keyframes floatUp {
            0% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -150%) scale(1.2); }
        }
        
        @keyframes slideInDown {
            from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
            to { transform: translateX(-50%) translateY(0); opacity: 1; }
        }
        
        @keyframes slideOutUp {
            from { transform: translateX(-50%) translateY(0); opacity: 1; }
            to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
        }
        
        .touching {
            transform: scale(0.95) !important;
            box-shadow: inset 0 4px 8px rgba(0,0,0,0.2) !important;
        }
    `;
    document.head.appendChild(style);
});

// –î–∞–µ–º –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã
window.addEventListener('load', () => {
    // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
    document.body.style.transition = 'background-color 0.3s ease';
});

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ–±–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∫–∞—Å–∞–Ω–∏–π
if ('ontouchstart' in window) {
    document.body.classList.add('touch-supported');
}
